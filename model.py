# -*- coding: utf-8 -*-
"""vectorized.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F4qiSinyEV7NlZ1Xk-xdRiWBc7U-Dun0

# **Importing important Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
# """# **Tweets visualizations**"""
#
# all_words = ' '.join([text for text in df['cleaned_tweet']])
# from wordcloud import WordCloud
#
# wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(all_words)
#
# plt.figure(figsize=(10, 7))
# plt.imshow(wordcloud, interpolation="bilinear")
# plt.axis('off')
# plt.show()
#
# normal_words = ' '.join([text for text in df['cleaned_tweet'][df['label'] == False]])
#
# wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(normal_words)
# plt.figure(figsize=(10, 7))
# plt.imshow(wordcloud, interpolation="bilinear")
# plt.axis('off')
# plt.show()
#
# negative_words = ' '.join([text for text in df['cleaned_tweet'][df['label'] == True]])
# wordcloud = WordCloud(width=800, height=500,
#                       random_state=21, max_font_size=110).generate(negative_words)
# plt.figure(figsize=(10, 7))
# plt.imshow(wordcloud, interpolation="bilinear")
# plt.axis('off')
# plt.show()



"""# **Data Splitting into train and Test**"""
def classifier(x_train,y_train):

    """# **Classification Algorithm**"""

    from sklearn.naive_bayes import MultinomialNB  # Naive Bayes classification algorithm
    from sklearn.linear_model import LogisticRegression
    from sklearn.svm import SVC
    from sklearn.tree import DecisionTreeClassifier  # Import Decision Tree Classifier
    from sklearn.ensemble import RandomForestClassifier

    # mn = MultinomialNB()
    # mn.fit(x_train, y_train)
    # def classificationModel(m):
    #        # mn = MultinomialNB()
    #        # mn.fit(x_train, y_train)  # fit the model
    #        return mn.predict(m)  # Predict the tweets

    # Performance.confusionMatrix(y_test, y_pred)
    #
    # Performance.perfection(y_test, y_pred)

    logistic = LogisticRegression(random_state=0)
    logistic.fit(x_train, y_train)
    return logistic
    # y_pred = logistic.predict(x_test)
    #
    # Performance.confusionMatrix(y_test, y_pred)
    #
    # Performance.perfection(y_test, y_pred)

    # svclassifier = SVC(kernel='linear')
    # svclassifier.fit(x_train, y_train)
    # y_pred = svclassifier.predict(x_test)
    #
    # Performance.confusionMatrix(y_test, y_pred)
    #
    # Performance.perfection(y_test, y_pred)

    # # Create Decision Tree classifer object
    # clf = DecisionTreeClassifier()
    #
    # # Train Decision Tree Classifer
    # clf = clf.fit(x_train, y_train)
    #
    # # Predict the response for test dataset
    # y_pred = clf.predict(x_test)
    #
    # Performance.confusionMatrix(y_test, y_pred)
    #
    # Performance.perfection(y_test, y_pred)

    # RandomForestclassifier = RandomForestClassifier(n_estimators=10, criterion="entropy")
    # RandomForestclassifier.fit(x_train, y_train)
    # y_pred = RandomForestclassifier.predict(x_test)
    #
    # Performance.confusionMatrix(y_test, y_pred)
    #
    # Performance.perfection(y_test, y_pred)


